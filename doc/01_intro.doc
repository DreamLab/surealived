[ALL]
\thispagestyle{empty}
~
\vspace{20em}
~
\begin{center}
 \epsfig{file=surealived-logo, width=8cm}
 \textit{ver. 0.8.2}
\end{center}
\newpage

\tableofcontents
\newpage

[PL]
\section{Wprowadzenie}
\textit{Linux Virtual Server (LVS)} jest jednym z najbardziej wydajnych
serwerów balansowania ruchu. W ¶rodowiskach, gdzie istniej±
setki (jak nie tysi±ce) us³ug wpiêtych do \textit{LVS}, prawdziwym
wyzwaniem staje siê ich przetestowanie i podjêcie w³a¶ciwej akcji
(wypiêcie / wpiêcie serwera). Problemem skalowania w tej materii
jest tak¿e niewielki wybór aplikacji testuj±cych, w szczegolno¶ci
dla \textit{LVSów}, gdzie wpiêtych jest wiele serwerów a czêstotliwo¶æ
testu nie powinna byæ d³u¿sza ni¿ kilka sekund. Takie za³o¿enie
zdecydowanie ogranicza listê mo¿liwych do zastosowania aplikacji,
gdy¿ musz± one byæ oparte o multipleksowane IO (select/poll/epoll). 
Do tej pory jedyn± aplikacj± spe³niaj±c± te wymagania by³ \textit{keepalived}. 
Ze wzglêdu na b³êdy i pewne braki funkcjonalne w \textit{keepalived}
zdecydowali¶my siê napisaæ od zera tester us³ug. Nazwali¶my go do¶æ
przewrotnie \textit{SureAliveD}, ze wzglêdu na to, i¿ chcemy byæ pewni,
¿e wpiête do \textit{LVSa} us³ugi dzia³aj±.

[EN]
\section{Introduction}

[PL]
\subsection{Czym jest i jak dzia³a \textit{SureAliveD}?}
\textit{SureAliveD} jest bardzo efektywnym testerem serwerów \textit{real}
wpiêtych do LVSa. Zdecydowali¶my siê na odseparowanie warstwy
testuj±cej od modyfikuj±cej zmiany w~j±drze linuksa (w~tablicy
\textit{IPVS}). Aplikacjê testuj±c± dostêpno¶æ reali nazwali¶my
\textbf{surealived}, natomiast synchronizator zmian w~\textit{IPVS}
\textbf{ipvssync}.

[EN]
\subsection{What the \textit{SureAliveD is and how it works}?}

[PL]
Podstawowym za³o¿eniem aplikacji by³o zast±pienie stosowanego do
tej pory \textit{keepalived} w~czê¶ci testuj±cej. \textit{Keepalived}
¶wietnie sprawuje siê tam, gdzie nie ma potrzeby czêstego grzebania 
w~konfiguracji. W~du¿ych ¶rodowiskach, gdzie do LVSa wpiête s± setki
us³ug, problematyczn± staje siê ka¿dorazowa konieczno¶æ prze³adowania
ca³o¶ci konfiguracji (nawet przy potrzebie zmiany wagi pojedynczego
serwera). Przy czêstym prze³adowywaniu konfiguracji uwidaczniaj± siê
b³êdy takie jak: zaniechanie testowania niektórych us³ug,
segfaultowanie checkera, pozostawienie otwartych deskryptorów, brak
mo¿liwo¶ci przetestowania poprawno¶ci sk³adni pliku konfiguracyjnego
oraz czyszczenie tablicy \textit{IPVS}%
\footnote{Istnieje owszem opcja uruchomienia \textbf{keepalived}
z pozostawieniem starych wpisów, jednak od tego momentu przestaje siê on
''interesowaæ'' serwerami, których nie ma ju¿ w~konfiguracji a~pozosta³y
w~\textit{IPVS} -- i~zamiast usuwaæ pozostawia je nietkniête z~uprzednio
ustawion± wag±.}.

[EN]
TODO

[PL]
\subsection{Charakterystyka \textbf{surealived}}
Oto podstawowe cechy testera -- \textbf{surealived}:
\begin{itemize}
 \item oparty na epollu,
 \item posiada rozszerzaln± XMLow± konfiguracjê (rozparsowywaln±
       przez modu³),
 \item testery us³ug s± w~rzeczywisto¶ci ³adowanymi dynamicznie
       modu³ami -- daje to mo¿liwo¶æ ³atwego dodawania nowych 
       testerów kolejnych us³ug,
 \item w~chwili obecnej ma zaimplementowane modu³y testuj±ce 
       protoko³ów TCP, HTTP, DNS, exec (uruchomienie zewnêtrznego
       testera) oraz no-test (potraktowanie serwera jako dostêpnego
       zawsze),
 \item ma wbudowan± przezroczyst± obs³ugê SSL (wystarczy ustawiæ
       atrybut SSL=''1'' przy konfiguracji testera).
 \item zapisuje statystyki po³±czeñ do poszczególnych serwerów
       (czas po³±czenia i czas odpowiedzi),
 \item trzyma tablicê stanów serwerów, których test siê nie powiód³,
       a tak¿e tablicê przes³aniaj±c± bie¿±c± konfiguracjê (stan
       serwera oraz wagi), stany te s± honorowane po restarcie,
 \item na starcie nastêpuje zapisanie stanu dla \textbf{ipvssync}
       i wymuszenie synchronizacji konfiguracji z tablic± \textit{IPVS},
 \item komunikacja z \textbf{ipvssync} odbywa siê poprzez plik
       konfiguracji dla ipvssync (zapisywany co 60 sek.) oraz pliki
       ró¿nicowe, zapisywane przy ka¿dej zmianie,
 \item start testów roz³o¿ony jest w~czasie (1 sek.), co zmniejsza
       obci±¿enie CPU w~przypadku równoczesnego uruchomienia testów
       dla setek reali,
 \item umo¿liwia sprawdzenie sk³adni (parametr -t),
 \item restart aplikacji nie stanowi problememu,
 \item mo¿liwa jest praca \textbf{surealived} tylko jako testera us³ug,
       bez synchronizacji do \textit{IPVS},
 \item wystawia port do zarz±dzania (domy¶lnie 1337), umo¿liwiaj±c 
       wykonywanie pewnych akcji bez restartowania aplikacji.
\end{itemize}
 
[EN]
TODO

[PL]
\subsection{Charakterystyka \textbf{ipvssync}}
Oto cechy synchronizatora \textbf{ipvssync}:
\begin{itemize}
 \item u¿ywa konfiguracji wygenerowanej przez \textbf{surealived}, tzn
       \textit{ipvsfull.cfg} oraz plików ró¿nicowych,
 \item pozwala na pozostawienie/usuniêcie niezarz±dzanych przez niego
       \textit{wirtuali} z \textbf{IPVS}, w~przypadku \textit{reali} 
       pe³na synchronizacja odbywa siê zawsze,
 \item mo¿liwe jest sprawdzenie sk³adni konfiguracji (parametr -t),
 \item restart aplikacji nie jest problemem, podobnie jak w~przypadku
       restartu \textbf{surealived} nastêpuje wymuszenie pe³nej
       synchronizacji z \textit{IPVS},
 \item wymaga dzia³ania z u¿ytkownika root.
\end{itemize}
\newpage

[EN]
TODO
\newpage
